# -*- Mode: Tcl -*-
#
# Kappa : Japanese Z39.50(-1995) Client.
#
#  Copyright (C) 1997-1998 Yuka Egusa. All rights reserved.
#  Copyright (C) 1999 Yuka Egusa and Masao Takaku. All rights reserved.

global version
set version "@VERSION@"

global conf

# 色の指定
set conf(fgcolor) {black}
set conf(bgcolor) {#c0dfff}
set conf(hlcolor) {blue}	;# 強調色

# (デモ用に)ウィンドウのサイズ・位置を固定する。
set conf(openGeometry) 633x518+220+120
set conf(searchGeometry) 681x607+200+100

. configure -bg $conf(bgcolor)

# C言語と、コマンドをやりとりしている関数 ---------------------------------
proc Searchproc {cmd entry} {
    #puts $cmd
    #puts $entry
    set TclComandName $cmd
    set TclEntryArg $entry
    TclClientCommand
}

# 指定されたファイルをオープンして、指定されたリストボックスに書き込む関数---
proc recordToListbox {filename listboxname} {
    set fd [open $filename r]
    while { [gets $fd line] >= 0 } { $listboxname insert end $line }
    close $fd
}

# 著作権表示を行なう。
proc copyright {} {
    global conf version
    toplevel .about
    .about configure -bg $conf(bgcolor)
    
    set copyright "Kappa : Japanese Z39.50 Client v$version\n"
    append copyright "Copyright (C) 1999\n"
    append copyright "	Yuka Egusa <yuka@ulis.ac.jp>\n"
    append copyright "	Masao Takaku <masao@ulis.ac.jp>\n"
    append copyright "All right reserved.\n"
    message .about.textmessage -fg $conf(fgcolor) -bg $conf(bgcolor) \
	    -width 700 -padx 1c -pady 1c -text $copyright
    
    button .about.fin -bg $conf(bgcolor) -fg $conf(fgcolor) \
	    -text " Close Help " -command {destroy .about}

    pack .about.textmessage  .about.fin
    wm title .about "About Kappa"
}

# エラーメッセージを出して オープンウインドウを出す 関数
proc errWin_open {str} {
    global conf
    toplevel .err1

    frame .err1.f -bg $conf(bgcolor)
    label .err1.f.text -bg $conf(bgcolor) -fg $conf(fgcolor) -text $str -relief ridge
    label .err1.f.errorimage -bg $conf(bgcolor) -fg $conf(fgcolor) -bitmap error
    pack .err1.f.text .err1.f.errorimage -in .err1.f -side left

    button .err1.fin -fg $conf(fgcolor) -bg $conf(bgcolor) -text " OK ? " -command {
        destroy .err1
	#wm deiconify .topen
	exit 1
        #popUpOpenCmd
    }
    pack .err1.f .err1.fin
    wm title .err "接続エラー"
}

# エラーメッセージを出す 関数
proc errWin {str} {
    global conf
    toplevel .err1

    frame .err1.f -bg $conf(bgcolor)
    label .err1.f.text -bg $conf(bgcolor) -fg $conf(fgcolor) -text $str -relief ridge
    label .err1.f.errorimage -bg $conf(bgcolor) -fg $conf(fgcolor)  -bitmap error
    pack .err1.f.text .err1.f.errorimage -in .err1.f -side left
    
    button .err1.fin -bg $conf(bgcolor) -fg $conf(fgcolor) -text " OK ? " \
	    -command { destroy .err1 }
    pack .err1.f .err1.fin
    wm title .err "エラー"
} 

proc inputShowEntry {setnum beginnum endnum} {
    .showEnter.setno delete 0 end
    .showEnter.beginno delete 0 end
    .showEnter.endno delete 0 end
    .showEnter.setno insert 0 $setnum
    .showEnter.beginno insert 0 $beginnum
    .showEnter.endno insert 0 $endnum
}

#proc urlExtract {str host port dbname} {
#    regexp {^z39.50s://([^/:]*):?([0-9]*)/(.*)$} $str match \
#	    host port dbname
#}

# ホスト名などの情報を取得する。
proc getDBInfo {filename} {
    global host port dbname format comment
    set host(default) ""
    set port(default) "210"
    set dbname(default) "Default"
    set format(default) "USMARC"
    set comment(default) ""

    set infile [ open "$filename" r ]
    set id 0
    while { [ gets $infile line ] >= 0 } {
	if { [ regexp {^z39.50s://([^/:]*):?([0-9]*)/([^#]*)#([^#]*)#?(.*)?$} $line match host($id) port($id) dbname($id) comment($id) format($id) ]} {
	    if { ! [ string compare $port($id) "" ] } {
		set port($id) $port(default)
	    }
	    #puts "$host($id) $port($id) $dbname($id)"
	} else {
	    continue
	}
	incr id
    }
    close $infile
    #    puts [ parray host ] [ parray port ]
}

proc inputOpenEntry {host port DBname} {
    .topen.e0 delete 0 end
    .topen.e1 delete 0 end
    .topen.e2 delete 0 end
    .topen.e0 insert 0 $host
    .topen.e1 insert 0 $port
    .topen.e2 insert 0 $DBname
}

# menubutton を作る。
# 第1引数は名前、第2引数は親Widgetのパス名をとる。
proc makeMenuButton {name parent} {
    global conf
    # 最初の1文字は大文字にする。
    set first [string toupper [string range $name 0 0]]
    set remain [string range $name 1 [string length $name]]
    append label $first $remain
    # puts "ラベル: $label"
    
    menubutton $parent.$name -ind true -relief flat -under 0 \
	    -indicatoron false -fg $conf(fgcolor) -bg $conf(bgcolor) \
	    -text $label -menu $parent.$name.menu
    # -font $fontsize
}

# 接続ウインドウの定義
proc popUpOpenCmd {} {
    global version conf host port dbname format comment

    toplevel .topen
    wm withdraw .
    .topen configure -bg $conf(bgcolor)

    # メニューバーの定義
    frame .topen.menubar -bg $conf(bgcolor)
    makeMenuButton file .topen.menubar
    makeMenuButton help .topen.menubar
    
    menu .topen.menubar.file.menu -fg $conf(fgcolor) -bg $conf(bgcolor)
    # -font $fontsize
    .topen.menubar.file.menu add command -label "Exit" -command {
	destroy .
    }
    menu .topen.menubar.help.menu -fg $conf(fgcolor) -bg $conf(bgcolor)
    # -font $fontsize
    .topen.menubar.help.menu add command -label "About Kappa" -command {
	copyright
    }
    pack .topen.menubar.file -side left
    pack .topen.menubar.help -side right

    label .topen.l0 -fg $conf(fgcolor) -bg $conf(bgcolor)  \
	    -relief groove -text "Host"
    label .topen.l1 -fg $conf(fgcolor) -bg $conf(bgcolor)  \
	    -relief groove -text "Port"
    label .topen.l2 -fg $conf(fgcolor) -bg $conf(bgcolor)  \
	    -relief groove -text "DataBase Name"

    entry .topen.e0 -fg $conf(fgcolor) -bg $conf(bgcolor)  \
	    -width 24 -relief sunken -textvariable openhostdata
    entry .topen.e1 -fg $conf(fgcolor) -bg $conf(bgcolor)  \
	    -width 7 -relief sunken -textvariable openportdata
    entry .topen.e2 -fg $conf(fgcolor) -bg $conf(bgcolor)  \
	    -width 16 -relief sunken -textvariable openbasedata
    
    button .topen.button -fg $conf(fgcolor) -bg $conf(bgcolor)  \
	    -bg $conf(hlcolor) -fg white -text "connect" -command {
	set openentdata "tcp:${openhostdata}:${openportdata}"
	
	destroy .topen
	#wm withdraw .topen
	wm title . "検索画面 <${openhostdata}:${openbasedata}>"
	Searchproc "open" $openentdata
	
	Searchproc "base" $openbasedata
	wm deiconify .
	focus .entEnter.inputentry
    }
    
    # ------  リストボックスを作っている部分 (2つ) --------------
    listbox .topen.li0 -fg $conf(fgcolor) -bg $conf(bgcolor)  \
	    -relief groove -width 60 -height 17 \
	    -yscrollcommand ".topen.s1 set" -xscrollcommand ".topen.s2 set"

    set basedir [ file dirname [ info script ] ]
    getDBInfo "$basedir/opensite"
    # puts [parray comment]
    set size [ array size comment ]
    set i "0"
    while { $i < $size-1 } {
	.topen.li0 insert end "$comment($i)"
	incr i
    }

    bind .topen.li0 <ButtonRelease-1> {
	set id [ .topen.li0 curselection ]
	inputOpenEntry "$host($id)" "$port($id)" "$dbname($id)"
	if { [ string compare $format($id) "" ] } {
	    Searchproc "format" $format($id)
	    .showEnter.recordSyntax configure -text "$format($id)"
	}
    }
    #.topen.li0 insert 0 "aladdin (zwais)"
    #.topen.li0 insert 1 "AGRICOLA"
    #.topen.li0 insert 2 "dranet"
    #.topen.li0 insert 3 "Univercity of Wisconsin-madison"

    scrollbar .topen.s1 -bg $conf(bgcolor) \
	    -orient vertical  -command ".topen.li0 yview"
    scrollbar .topen.s2 -bg $conf(bgcolor) \
	    -orient horizontal  -command ".topen.li0 xview"
    # -orient スクロールバーの向き  vertical 縦  horizontal 横
    
    message .topen.m -fg $conf(fgcolor) -bg $conf(bgcolor) -relief sunken -text ""

    grid .topen.menubar -row 0 -column 0 -columnspan 4 -sticky ew

    grid .topen.l0 -row 1 -column 1 -sticky ew
    grid .topen.l1 -row 1 -column 2 -sticky ew
    grid .topen.l2 -row 1 -column 3 -sticky ew
    
    grid .topen.button -row 2 -column 0 -sticky ew
    grid .topen.e0 -row 2 -column 1 -sticky ew
    grid .topen.e1 -row 2 -column 2 -sticky ew
    grid .topen.e2 -row 2 -column 3 -sticky ew


    grid .topen.li0 -row 3 -column 0 -columnspan 4 -sticky nsew
    grid .topen.s1 -row 3 -column 4 -sticky ns

    grid .topen.s2 -row 4 -column 0 -columnspan 4 -sticky ew

    #リストボックスのある行に
    #（ウインドウを広げた時にリストボックスの大きさだけを大きくするため）
    grid rowconfigure .topen 3 -weight 100
    #リストボックスのある列に（上の行と同理由）
    grid columnconfigure .topen 0 -weight 100
    grid columnconfigure .topen 1 -weight 100
    grid columnconfigure .topen 2 -weight 100
    grid columnconfigure .topen 3 -weight 100   

    .topen configure -bd 2
    wm title .topen "接続画面"
    wm geometry .topen $conf(openGeometry)
}

# ------ entry フレームを宣言しているところ --------------------------------- 
#set entdata ""
frame .entEnter -bg $conf(bgcolor)
label .entEnter.inputlabel -fg $conf(fgcolor) -bg $conf(bgcolor) -text " Query:" 
#.entEnter.inputlabel conf -font "-*-*-*-*-*-20-*" 
entry .entEnter.inputentry -fg white -bg $conf(hlcolor) \
	-width 40 -relief sunken -textvariable entdata 
#.entEnter.inputentry conf -font "-*-*-*-*-*-20-*"
#-fg $conf(fgcolor) -bg $conf(bgcolor)
button .entEnter.clear -fg $conf(fgcolor) -bg $conf(bgcolor) -text clear -command {
    .entEnter.inputentry delete 0 end
}
pack .entEnter.inputlabel .entEnter.inputentry  .entEnter.clear -in .entEnter -side left

frame .showEnter -bg $conf(bgcolor)
label .showEnter.label1 -fg $conf(fgcolor) -bg $conf(bgcolor)  -text "\["
label .showEnter.label2 -fg $conf(fgcolor) -bg $conf(bgcolor)  -text "\] No"
label .showEnter.label3 -fg $conf(fgcolor) -bg $conf(bgcolor)  -text "〜 No"
label .showEnter.label4 -fg $conf(fgcolor) -bg $conf(bgcolor)  -text "  "
entry .showEnter.setno -fg $conf(fgcolor) -bg $conf(bgcolor) \
	-width 4 -relief sunken -textvariable setnodata
entry  .showEnter.beginno -fg $conf(fgcolor) -bg $conf(bgcolor)  \
	-width 6 -relief sunken -textvariable beginnodata
entry .showEnter.endno -fg $conf(fgcolor) -bg $conf(bgcolor)  \
	-width 6 -relief sunken -textvariable endnodata

menubutton  .showEnter.recordSyntax -ind true -relief raised\
	-text "USMARC" -menu .showEnter.recordSyntax.menu -fg $conf(fgcolor) -bg $conf(bgcolor)
menu .showEnter.recordSyntax.menu -fg $conf(fgcolor) -bg $conf(bgcolor)
.showEnter.recordSyntax.menu add command -label "USMARC" -command {
    .showEnter.recordSyntax configure -text "USMARC"
    Searchproc "format" "usmarc"
}
.showEnter.recordSyntax.menu add command -label "SUTRS" -command {
    .showEnter.recordSyntax configure -text "SUTRS"
    Searchproc "format" "sutrs"
}
.showEnter.recordSyntax.menu add command -label "DANMARC" -command {
    .showEnter.recordSyntax configure -text "DANMARC"
    Searchproc "format" "danmarc"
}
.showEnter.recordSyntax.menu add command -label "UKMARC" -command {
    .showEnter.recordSyntax configure -text "UKMARC"
    Searchproc "format" "ukmarc"
}
.showEnter.recordSyntax.menu add command -label "GRS1" -command {
    .showEnter.recordSyntax configure -text "GRS1"
    Searchproc "format" "grs1"
}     
.showEnter.recordSyntax.menu add command -label "SOIF" -command {
    .showEnter.recordSyntax configure -text "SOIF"
    Searchproc "format" "soif"
}
.showEnter.recordSyntax.menu add command -label "Summary" -command {
    .showEnter.recordSyntax configure -text "Summary"
    Searchproc "format" "summary"
}
.showEnter.recordSyntax.menu add command -label "Explain" -command {
    .showEnter.recordSyntax configure -text "Explain"
    Searchproc "format" "explain"
}
set element F
radiobutton .showEnter.full -text "Full" -value F -variable element \
	-bg $conf(bgcolor)
radiobutton .showEnter.burief -text "Brief" -value B  -variable element \
	-bg $conf(bgcolor)
pack  .showEnter.label1  .showEnter.setno  .showEnter.label2 \
	.showEnter.beginno  .showEnter.label3  .showEnter.endno \
	.showEnter.label4 \
	.showEnter.full .showEnter.burief .showEnter.recordSyntax -side left

# -------------------- entry フレームを宣言 終り--------------------------

# -------------------- ボタンを宣言しているところ -----------------------
button .find -fg $conf(fgcolor) -bg $conf(bgcolor) -text Search -command {
    .find configure -fg $conf(fgcolor) -bg $conf(bgcolor)
    .entEnter.inputentry configure -fg $conf(fgcolor) -bg $conf(bgcolor)
    .show configure -fg white -bg $conf(hlcolor)
    set lastline0 [.l0 index end]
    Searchproc "find" $entdata
    .l0 yview $lastline0
    #Searchproc "find" [toYazSyntax $entdata]
    #.entEnter.inputentry delete 0 end
}


bind .entEnter.inputentry <KeyPress> {
    .find configure -fg white -bg $conf(hlcolor)
    .entEnter.inputentry configure -fg white -bg $conf(hlcolor)
    .show configure -fg $conf(fgcolor) -bg $conf(bgcolor)
}

bind .entEnter.inputentry <Key-Return> {
    .find configure -fg $conf(fgcolor) -bg $conf(bgcolor)
    .entEnter.inputentry configure -fg $conf(fgcolor) -bg $conf(bgcolor)
    .show configure -fg white -bg $conf(hlcolor)
    set lastline0 [.l0 index end]
    Searchproc "find" $entdata
    #.entEnter.inputentry delete 0 end
    .l0 yview $lastline0
}
#button .show -fg $conf(fgcolor) -bg $conf(bgcolor) -text show -command {popUpShowCmd}
button .show  -fg $conf(fgcolor) -bg $conf(bgcolor) -text show -command {
    .show configure -fg $conf(fgcolor) -bg $conf(bgcolor)
    .find configure -fg $conf(fgcolor) -bg $conf(bgcolor)
    .entEnter.inputentry configure -fg white -bg $conf(hlcolor)
    set lastline1 [.l1 index end]
    set count [expr ${endnodata}-${beginnodata}+1]
    Searchproc "elements" $element
    Searchproc "show" "${beginnodata}+${count}@${setnodata}"
    .l1 yview $lastline1
}
#メニューバーの定義 
frame .menubar -bg $conf(bgcolor)
makeMenuButton file .menubar
makeMenuButton connect .menubar
makeMenuButton help .menubar

pack .menubar.file .menubar.connect -side left
pack .menubar.help -side right
# メニューバーの定義 ここまで

# ここから 各メニューの定義
# file メニューの宣言
menu .menubar.file.menu -fg $conf(fgcolor) -bg $conf(bgcolor)
# 以下 3行のコメントアウトを外すと、
# 新しい接続ウインドウが接続を切らずに出てくる
.menubar.file.menu add command -label "New Window" -command {
    exec kappa.bin &
}
.menubar.file.menu add command -label "Exit" -command {
    Searchproc "quit" ""
}

# connect メニュー
menu .menubar.connect.menu -fg $conf(fgcolor) -bg $conf(bgcolor)
.menubar.connect.menu add command -label "Disconnect" -command {
    Searchproc "close" ""
}
# help メニュー
menu .menubar.help.menu -fg $conf(fgcolor) -bg $conf(bgcolor)
.menubar.help.menu add command -label "About Query ..." -command {
    toplevel .helpquery

    .helpquery configure -bg $conf(bgcolor)
    message .helpquery.textmessage -bg $conf(bgcolor) -fg $conf(fgcolor) \
	    -padx 1c -pady 1c -text {
	「図書」を検索
	図書

	「書名にガラス」を検索
	ti="ガラス"

	「著者名に鈴木」を検索
	au="鈴木"

	1番目と2番目の検索結果集合のAND検索
	set=1 and set=2

    }

    button .helpquery.fin -bg $conf(bgcolor) -fg $conf(fgcolor) \
	    -text " Close " -command {destroy .helpquery}

    pack .helpquery.textmessage  .helpquery.fin
}
.menubar.help.menu add command -label "About Kappa" -command {
    copyright
}
# -------------------ボタンの宣言 終り--------------------------

# ------  リストボックスを作っている部分 (2つ) --------------
listbox .l0 -bg $conf(bgcolor) -fg $conf(fgcolor)  \
	-relief groove -width 60 -height 5 \
	-yscrollcommand ".s1 set" -xscrollcommand ".s2 set"
scrollbar .s1 -bg $conf(bgcolor) \
	-orient vertical  -command ".l0 yview"
scrollbar .s2 -bg $conf(bgcolor) \
	-orient horizontal  -command ".l0 xview"
# -orient スクロールバーの向き  vertical 縦  horizontal 横

# リストで指定すると、指定したところの show の履歴検索ができる
# 指定したところ "@set number" が、検索エントリーに入力される (add 12/10)
bind .l0 <ButtonRelease-1> {
    # show エントリー用 
    set setnum [expr [.l0 curselection] + 1]
    set liststr [.l0 get [.l0 curselection]]
    set len [expr [string length $liststr] - 1]
    set endnumber [string range $liststr [string wordstart $liststr $len] $len]
    if { $endnumber > 30} {
	set endnumber 30
    }
    inputShowEntry $setnum 1 $endnumber

    # 背景色の変更
    .find configure -fg $conf(fgcolor) -bg $conf(bgcolor)
    .entEnter.inputentry configure -fg $conf(fgcolor) -bg $conf(bgcolor)
    .show configure -fg white -bg $conf(hlcolor)
}

bind .l0 <ButtonRelease-3> {
    set setnum [expr [.l0 curselection] + 1]
    # 検索エントリー用
    set buf " set="
    set queryterm $buf$setnum
    .entEnter.inputentry insert insert $queryterm

    # 背景色の変更
    .show configure -fg $conf(fgcolor) -bg $conf(bgcolor)
    .entEnter.inputentry configure -fg white -bg $conf(hlcolor)
    .find configure -fg white -bg $conf(hlcolor)
}

listbox .l1 -fg $conf(fgcolor) -bg $conf(bgcolor) \
	-relief groove -width 60 -height 14 \
	-yscrollcommand ".s3 set" -xscrollcommand ".s4 set"
scrollbar .s3 -bg $conf(bgcolor) \
	-orient vertical  -command ".l1 yview"
scrollbar .s4 -bg $conf(bgcolor) \
	-orient horizontal  -command ".l1 xview"

# ------  リストボックス 終り -------------------------

# ------  メッセージ ----------------------------------
message .m -fg $conf(fgcolor) -bg $conf(bgcolor)  -relief sunken -text ""
# ------  メッセージ 終り ----------------------------------
#----------------  配置   ----------------------
grid .menubar -row 0 -column 0 -columnspan 3 -sticky ew
grid .find -row 1 -column 0 -columnspan 2 -sticky ew
grid .entEnter -row 1 -column 2 -columnspan 2 -sticky ew
#grid .clear -row 1 -column 3 -columnspan 1 -sticky ew
grid .show -row 2 -column 0 -columnspan 2 -sticky ew
grid .showEnter -row 2 -column 2 -columnspan 2 -sticky ew

grid .l0 -row 3 -column 0 -columnspan 3 -sticky nsew
grid .s1 -row 3 -column 3 -sticky ns
grid .s2 -row 4 -column 0 -columnspan 3 -sticky ew
grid .l1 -row 5 -column 0 -columnspan 3 -sticky nsew
grid .s3 -row 5 -column 3 -sticky ns
grid .s4 -row 6 -column 0 -columnspan 3 -sticky ew

#リストボックスのある行に
#（ウインドウを広げた時にリストボックスの大きさだけを大きくするため）
grid rowconfigure . 3 -weight 100
grid rowconfigure . 5 -weight 100
#リストボックスのある列に（上の行と同理由）
grid columnconfigure . 0 -weight 100
grid columnconfigure . 1 -weight 100
grid columnconfigure . 2 -weight 100

# popUpOpenCmd

#    set mywidth [winfo width .topen]
#    set myheight [winfo height .topen]
#    puts [winfo geometry .]
#    puts [winfo geometry .topen]
. configure -bd 2
wm geometry . $conf(searchGeometry)
#-------------------  配置終り -------------------
